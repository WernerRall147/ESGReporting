# PowerShell deployment script for ESG Reporting
# This script provides an alternative deployment method for Windows environments

param(
    [Parameter(Mandatory = $false)]
    [string]$Environment = "dev",
    
    [Parameter(Mandatory = $false)]
    [string]$Location = "East US",
    
    [Parameter(Mandatory = $false)]
    [switch]$SkipTests,
    
    [Parameter(Mandatory = $false)]
    [switch]$Force
)

# Script configuration
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

Write-Host "üöÄ ESG Reporting Deployment Script" -ForegroundColor Green
Write-Host "Environment: $Environment" -ForegroundColor Yellow
Write-Host "Location: $Location" -ForegroundColor Yellow

# Check prerequisites
Write-Host "`nüìã Checking prerequisites..." -ForegroundColor Blue

# Check if Azure CLI is installed
try {
    $azVersion = az version --output json | ConvertFrom-Json
    Write-Host "‚úÖ Azure CLI version: $($azVersion.'azure-cli')" -ForegroundColor Green
}
catch {
    Write-Error "‚ùå Azure CLI is not installed. Please install from: https://aka.ms/installazurecli"
    exit 1
}

# Check if Azure Developer CLI is installed
try {
    $azdVersion = azd version
    Write-Host "‚úÖ Azure Developer CLI installed" -ForegroundColor Green
}
catch {
    Write-Error "‚ùå Azure Developer CLI is not installed. Please install from: https://aka.ms/azd-install"
    exit 1
}

# Check if Python is installed
try {
    $pythonVersion = python --version
    Write-Host "‚úÖ $pythonVersion" -ForegroundColor Green
}
catch {
    Write-Error "‚ùå Python is not installed. Please install Python 3.8 or higher."
    exit 1
}

# Check if logged into Azure
try {
    $account = az account show --output json | ConvertFrom-Json
    Write-Host "‚úÖ Logged into Azure as: $($account.user.name)" -ForegroundColor Green
}
catch {
    Write-Host "‚ö†Ô∏è Not logged into Azure. Attempting login..." -ForegroundColor Yellow
    az login
}

# Install Python dependencies
Write-Host "`nüì¶ Installing Python dependencies..." -ForegroundColor Blue
try {
    pip install --upgrade pip
    pip install -r requirements.txt
    pip install -e .
    Write-Host "‚úÖ Python dependencies installed" -ForegroundColor Green
}
catch {
    Write-Error "‚ùå Failed to install Python dependencies"
    exit 1
}

# Run tests (unless skipped)
if (-not $SkipTests) {
    Write-Host "`nüß™ Running tests..." -ForegroundColor Blue
    try {
        pytest tests/ -v
        Write-Host "‚úÖ All tests passed" -ForegroundColor Green
    }
    catch {
        if (-not $Force) {
            Write-Error "‚ùå Tests failed. Use -Force to deploy anyway or fix the issues."
            exit 1
        }
        else {
            Write-Host "‚ö†Ô∏è Tests failed but continuing due to -Force flag" -ForegroundColor Yellow
        }
    }
}

# Initialize Azure Developer CLI environment
Write-Host "`nüîß Setting up Azure environment..." -ForegroundColor Blue
try {
    # Check if environment already exists
    $envExists = azd env list --output json | ConvertFrom-Json | Where-Object { $_.Name -eq $Environment }
    
    if (-not $envExists) {
        Write-Host "Creating new environment: $Environment" -ForegroundColor Yellow
        azd env new $Environment
    }
    else {
        Write-Host "Using existing environment: $Environment" -ForegroundColor Yellow
        azd env select $Environment
    }
    
    # Set environment variables
    azd env set AZURE_LOCATION $Location
    
    Write-Host "‚úÖ Azure environment configured" -ForegroundColor Green
}
catch {
    Write-Error "‚ùå Failed to configure Azure environment"
    exit 1
}

# Deploy infrastructure and application
Write-Host "`nüèóÔ∏è Deploying to Azure..." -ForegroundColor Blue
try {
    azd up --no-prompt
    Write-Host "‚úÖ Deployment completed successfully!" -ForegroundColor Green
}
catch {
    Write-Error "‚ùå Deployment failed"
    exit 1
}

# Get deployment outputs
Write-Host "`nüìÑ Deployment Information:" -ForegroundColor Blue
try {
    $outputs = azd env get-values --output json | ConvertFrom-Json
    
    Write-Host "Storage Account: $($outputs.AZURE_STORAGE_ACCOUNT_NAME)" -ForegroundColor Cyan
    Write-Host "Key Vault URL: $($outputs.AZURE_KEY_VAULT_URL)" -ForegroundColor Cyan
    Write-Host "Resource Group: $($outputs.AZURE_RESOURCE_GROUP)" -ForegroundColor Cyan
    
    # Create .env file if it doesn't exist
    if (-not (Test-Path ".env")) {
        Write-Host "`nüìù Creating .env file..." -ForegroundColor Blue
        $envContent = @"
# Azure Configuration (Generated by deployment script)
AZURE_STORAGE_ACCOUNT_NAME=$($outputs.AZURE_STORAGE_ACCOUNT_NAME)
AZURE_KEY_VAULT_URL=$($outputs.AZURE_KEY_VAULT_URL)
AZURE_RESOURCE_GROUP=$($outputs.AZURE_RESOURCE_GROUP)

# Optional: Set these for local development
# AZURE_STORAGE_CONNECTION_STRING=your_connection_string
LOG_LEVEL=INFO
"@
        $envContent | Out-File -FilePath ".env" -Encoding UTF8
        Write-Host "‚úÖ Created .env file with deployment values" -ForegroundColor Green
    }
    
}
catch {
    Write-Warning "‚ö†Ô∏è Could not retrieve deployment outputs"
}

# Final instructions
Write-Host "`nüéâ Deployment Complete!" -ForegroundColor Green
Write-Host "Next steps:" -ForegroundColor Yellow
Write-Host "1. Review the .env file and update any additional settings" -ForegroundColor White
Write-Host "2. Test the CLI: esg-reporting --help" -ForegroundColor White
Write-Host "3. Upload your first file: esg-reporting upload your-file.csv" -ForegroundColor White
Write-Host "4. Check the Azure portal to verify resources were created" -ForegroundColor White
Write-Host "`nFor more information, see the README.md file." -ForegroundColor Cyan
